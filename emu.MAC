	.Z80
	ASEG
	ORG	0100H
;
; CP/M emulation module for UZIX
;
; Compile:
;	 cpm m80n emu,=emu
; 	 cpm l80m /p:100,emu,emu/n/e
;
LOADADR EQU 0DE00h		; address where emulator resides at user process space
;
IOBYTE	EQU	3
Y0000	EQU	00000H
Y0001	EQU	00001H
Y0003	EQU	00003H
Y0005	EQU	00005H
Y0006	EQU	00006H
;
TTY_COOKED	EQU	0		; /* buffered */
TTY_RAW 	EQU	1		; /* unbuffered, wait */
TTY_RAW_UNBUFF	EQU	2		; /* unbuffered, no wait */
TTY_RAWCHAR	EQU	3		; /* unbuffered, no wait, one char */
TTY_QCOUNT	EQU	4		; /* inp. query size = TIOCSETN in UZI180 */
TTY_CONST	EQU	5		; /* direct CPM BIOS CONSTAT */
TTY_CONIN	EQU	6		; /* direct CPM BIOS CONIN */
;
.phase LOADADR
;
BDOSBEG:
	DB	"E",0C9h	; /usr/lib/emu.ext signature (register move opcode 45h+RET if dummy execute)
	DW	LOADADR		; emu load_address (start_addre=load_address+32)
	DW	BEGIN		; emu start_address (start_addre=load_address+32)
;
BDOS:	JP	DOBDOS	; load_address+6
;
; BDOS errors vectors (4 standard + 4 extended=interbank)
;
XERR1:  DW      ARET            ; bad sector
XERR2:  DW      ARET            ; select
XERR3:  DW      ARET            ; disk read/only
XERR4:  DW      ARET            ; file read/only
BERR1:  DB      2
        DW      ARET			; bad sector
BERR2:  DB      2
        DW      ARET			; select
BERR3:  DB      2
        DW      ARET			; disk read/only
BERR4:  DB      2
        DW      ARET			; file read/only
;
BEGIN:				; if BDOS space needed then move this starter block to BIOS end (to "use_once" code block)
	POP	BC
	LD	IX,00000H
	ADD	IX,SP		; IX=SP
	LD	SP,LOADADR
	CALL	INITEMU
	LD	DE,TBA6D
	LD	B,080H
	CALL	MEMZERO
	LD	HL,BWARM	; BIOSWRM
	PUSH	HL
	PUSH	HL		; ADDRESS FOR RETURNING BY RET OPCODE
	EI
	JP	100h
;
; BDOS functions table
;
TB250:
	DEFW	BWARM	; BDOS_0	; 0
	DEFW	BDOS_1	; 1
	DEFW	BDOS_2	; 2
	DEFW	BDOS_3	; 3
	DEFW	BDOS_4	; 4
	DEFW	BDOS_5	; 5
	DEFW	BDOS_6	; 6
	DEFW	BDOS_7	; 7
	DEFW	BDOS_8	; 8
	DEFW	BDOS_9	; 9
	DEFW	BDOS_10	; 10 - ввод строки с клавиатуры в буфер строки
	DEFW	CONSTAT	; 11 - опрос состояния клавиатуры в A: A=00 - не активна, A=0FFH - активна
	DEFW	BDOS_12	; 12
	DEFW	RETA0	; 13
	DEFW	RETA0	; 14
	DEFW	BDOS_15 ; 15
	DEFW	BDOS_16 ; 16
	DEFW	BDOS_17 ; 17
	DEFW	BDOS_18 ; 18
	DEFW	BDOS_19 ; 19
	DEFW	BDOS_20 ; 20
	DEFW	BDOS_21 ; 21
	DEFW	BDOS_22 ; 22
	DEFW	BDOS_23 ; 23
	DEFW	BDOS_24 ; 24
	DEFW	RETA0	; 25
	DEFW	BDOS_26 ; 26
	DEFW	BDOS_27 ; 27
	DEFW	RETA0	; 28
	DEFW	BDOS_29	; 29
	DEFW	RETA0	; 30
	DEFW	BDOS_31	; 31
	DEFW	RETA0	; 32
	DEFW	BDOS_33	; 33
	DEFW	BDOS_34	; 34
	DEFW	BDOS_35	; 35
	DEFW	BDOS_36	; 36
; extended calls
	DEFW	RETA0	; 37
	DEFW	BDOS_38	; 38
	DEFW	BDOS_39	; 39
	DEFW	RETA0	; 40
	DEFW	RETA0	; 41
	DEFW	BDOS_42	; 42
	DEFW	RETA0	; 43
	DEFW	BDOS_44	; 44
;
DOBDOS:	LD	(DB8D4),DE 	; B2AA
	LD	(DB8D6),HL
	LD	B,000H
	LD	A,C
	LD	(DB8D8),A
	CP	01BH
	CALL	Z,BDOS_27	
	CP	02DH
	LD	A,0FFH
	LD	L,A
	RET	NC
	PUSH	IX
	PUSH	IY
	LD	HL,RETBDOS
	PUSH	HL
	LD	HL,TB250
	ADD	HL,BC
	ADD	HL,BC
	LD	A,(HL)
	INC	HL
	LD	H,(HL)
	LD	L,A
	JP	(HL)
;
RETBDOS:POP	IY
	POP	IX
	LD	DE,(DB8D4)
	LD	A,(DB8D8)
	CP	01BH
	LD	C,A
	LD	A,L
	LD	B,H
	LD	HL,(DB8D6)
	OR	A
ARET:RET
;
;BDOS_0:	JP	BWARM	; BIOSWARM
;
BDOS_6:	LD	A,E
	CP	0FFH
	JR	C,BDOS_2		
	CALL GETCHAR
	LD	B,A
	LD	A,H
	OR	L
	RET	Z
	LD	L,B
	LD	H,000H
	RET
;
BDOS_1:	CALL GETCHAR
	LD	B,A
	LD	A,H
	OR	L
	JR	Z,BDOS_1		; wait for key pressed
	LD	A,B
AB308:	PUSH	AF
	LD	C,A
	CALL	CONOUT
	POP	AF
	LD	H,000H
	CP	00AH
	LD	L,A
	RET	NZ
	LD	L,00DH
	RET
;
TTYCOOKED:
	PUSH	AF
	PUSH	HL
	LD	HL,TTY_COOKED	; 00000H	; tty NORMAL (queued) mode
	CALL	TTYCTL
	POP	HL
	POP	AF
	RET
;
BDOS_3:	CALL	RETA0
	JR	AB308
;
BDOS_2:	LD	C,E
	JP	CONOUT
;
BDOS_4:	LD	C,E
	JP	RETA0
;
BDOS_5:	LD	A,E
	CP	00DH
	RET	Z
	JP	RETA0
;
BDOS_7:
	ld	a,(IOBYTE)
	ld	l,a
	ret
;
BDOS_8:	
	ld	a,e
	ld	(IOBYTE),a
	RET
;
BDOS_9:	LD	A,(DE)
	INC	DE
	CP	024H
	RET	Z
	CP	00DH
	JR	Z,BDOS_9
	DEC	DE
AB340:	PUSH	DE
	LD	HL,00000H
AB344:	LD	A,(DE)
	INC	DE
	INC	HL
	CP	024H
	JR	Z,AB34F
	CP	00DH
	JR	NZ,AB344
AB34F:	DEC	HL
	LD	(DESTOR+1),DE
	POP	DE
	PUSH	AF
	PUSH	HL
	PUSH	DE
	LD	HL,00001H	; stdout
	PUSH	HL
	LD	L,024H		; sys_readwrite -> write (24h)
;	PUSH	HL
;	RST		8		; CALL	X0008 ; call kernel
;	POP	HL
call KERNEL
;
	POP	HL
	POP	HL
	POP	HL
DESTOR:	LD	DE,00000H
	POP	AF
	CP	024H
	JR	NZ,AB340
	RET
;
BDOS_10:
	PUSH	DE
	CALL TTYCOOKED
	POP	DE
	LD	A,(DE)
	LD	C,A
	LD	B,000H
	PUSH	DE
	PUSH	BC
	INC	DE
	INC	DE
	PUSH	DE
	LD	C,000H		; stdin
	PUSH	BC
	LD	HL,00017H	; sys_readwrite -> read (17h)
;	PUSH	HL
;	RST		8		; CALL	X0008	; call kernel
;	EX	DE,HL
;	POP	BC
call KERNEL
;
	POP	BC
	POP	BC
	POP	BC
	POP	DE
	DEC	HL
	LD	A,L
	ADD	HL,DE
	INC	HL
	INC	HL
	LD	(HL),00DH
	INC	DE
	LD	(DE),A
	JP	TTYRAWCHAR
;
BDOS_12:LD	HL,00022H
	LD	(DB8D6),HL
	RET
;
BDOS_15:CALL	AB8B7
	CALL	BDOS_17
	LD	A,H
	AND	L
	INC	A
	RET	Z
	LD	DE,(DB8D4)
	CALL	AB780
	LD	DE,00002H
	CALL	AB415
	LD	IY,(DB8D4)
	LD	(IY+020H),000H
	LD	(IY+00EH),080H
	LD	(IY+00FH),000H
	RET	Z
AB3DA:	EX	DE,HL
	LD	IY,(DB8D4)
	LD	(IY+01AH),E
	LD	(IY+01BH),D
	LD	(DB8F3),DE
	LD	IX,00002H
	LD	HL,00000H
	LD	DE,00000H
	CALL	AB81F
	LD	IY,(DB8D4)
	LD	(IY+010H),L
	LD	(IY+011H),H
	LD	(IY+012H),E
	LD	(IY+013H),D
	LD	IX,00000H
	LD	HL,00000H
	LD	DE,00000H
	CALL	AB81F
;	JR	RET0000
;
RET0000:LD	HL,00000H
	RET
;
AB415:	PUSH	DE
	PUSH	HL
	LD	HL,00014H		; sys_open
;	PUSH	HL
;	RST	8			; CALL	X0008	; call kernel
;	EX	DE,HL
;	POP	BC
call KERNEL
;
	POP	BC
	POP	BC
	LD	A,H
	AND	L
	INC	A
	RET
;
BDOS_16:CALL	AB835
AB429:	PUSH	DE
	LD	HL,00006H		; sys_close
;	PUSH	HL
;	RST	8				; CALL	X0008	; call kernel
;						; EX DE,HL ???
;	POP	BC				
call KERNEL
;
	POP	BC
AB433:	LD	A,H
	AND	L
	INC	A
	Jr	NZ,RET0000
;
BDOS_29:
RETFFFF:LD	HL,0FFFFH
	RET
;
BDOS_17:LD	HL,0002EH
	LD	(DB8E6),HL
	LD	DE,00000H
	LD	HL,DB8E6
	CALL	AB415
	RET	Z
	LD	(DBA65),HL
	LD	(DB8F3),HL
	LD	HL,(DB8D4)
	LD	(DB4E3),HL
BDOS_18:LD	HL,(DB4E3)
	LD	(DB8D4),HL
	LD	HL,(DBA61)
	LD	(DBA63),HL
AB465:	LD	HL,DBA7D
	LD	(DBA61),HL
	LD	A,017H
	LD	DE,00010H
	CALL	AB9D5
	JR	C,AB4D7
	OR	A
	JR	Z,AB4D7
	LD	A,(DBA7D)
	OR	A
	JR	Z,AB465
	LD	A,(DBA7F)
	CP	02EH
	JR	Z,AB465
	CALL	AB844
	OR	A
	JR	NZ,AB465
	LD	A,(DB8D8)
	CP	00FH
	LD	HL,00000H
	JR	Z,AB4DA
	LD	DE,TBA6D
	CALL	AB780
	LD	DE,TB8F5
	PUSH	DE
	PUSH	HL
	LD	HL,0001BH		; sys_statfstat
;	PUSH	HL
;	RST	8				; CALL	X0008	; call kernel
;	EX	DE,HL
;	POP	BC
call KERNEL
;
	POP	BC
	POP	BC
	LD	A,H
	OR	L
	JR	NZ,AB4C7
	LD	HL,(DB903)
	LD	(DBA8A),HL
	LD	HL,(DB905)
	LD	(DBA8C),HL
	LD	HL,(DB90F)
	LD	(DBA84),HL
	LD	HL,(DB911)
	LD	(DBA86),HL
AB4C7:	LD	HL,TBA6D
	LD	DE,(DBA63)
	LD	BC,00021H
	LDIR
	LD	L,B
	LD	H,C
	JR	AB4DA
;
AB4D7:	LD	HL,0FFFFH
AB4DA:	LD	DE,(DBA63)
	LD	(DBA61),DE
	RET
;
DB4E3:	DEFW	0
;
BDOS_19:CALL	AB8B7
	CALL	AB780
	PUSH	HL
	LD	HL,00021H		; sys_unlink
;	PUSH	HL
;	RST	8				; CALL	X0008	; call kernel
;	EX	DE,HL
;	POP	BC
call KERNEL
;
	POP	BC
	JP	AB433
;
BDOS_38:LD	A,024H
	LD	(DBA68),A
	JR	AB505
;
BDOS_39:LD	A,017H
	LD	(DBA68),A
AB505:	CALL	AB835
	CALL	AB7DC
	LD	HL,(DBA61)
	PUSH	HL
	LD	HL,00000H
	LD	IY,(DB8D4)
	LD	E,(IY+00EH)
	LD	D,(IY+00FH)
	LD	BC,(DB8D6)
	LD	A,D
	OR	A
	JR	NZ,AB567
	LD	A,E
	CP	001H
	JR	NZ,AB567
	LD	D,B
	LD	E,C
	PUSH	DE
	LD	BC,00001H
	LD	A,(DBA68)
	CALL	AB9D5
	POP	DE
	JR	C,AB5B5
	PUSH	DE
	PUSH	HL
	LD	D,H
	LD	E,L
	LD	L,(IY+021H)
	LD	H,(IY+022H)
	ADD	HL,DE
	LD	(IY+021H),L
	LD	(IY+022H),H
	CALL	C,AB559
	POP	HL
	POP	DE
	PUSH	HL
	XOR	A
	SBC	HL,DE
	LD	A,H
	OR	L
	POP	HL
	JR	Z,AB5A9
	JR	AB5B5
;
AB559:	LD	L,(IY+023H)
	LD	H,(IY+024H)
	INC	HL
	LD	(IY+023H),L
	LD	(IY+024H),H
	RET
;
AB567:	PUSH	BC
	PUSH	DE
	PUSH	HL
	LD	A,(DBA68)
	CALL	AB9D5
	POP	HL
	POP	DE
	POP	BC
	JR	C,AB5B5
	OR	A
	JR	Z,AB5B9
	PUSH	HL
	LD	HL,(DBA61)
	ADD	HL,DE
	LD	(DBA61),HL
	LD	IY,(DB8D4)
	LD	L,(IY+021H)
	LD	H,(IY+022H)
	INC	HL
	LD	(IY+021H),L
	LD	(IY+022H),H
	LD	A,H
	OR	L
	JR	NZ,AB5A2
	LD	L,(IY+023H)
	LD	H,(IY+024H)
	INC	HL
	LD	(IY+023H),L
	LD	(IY+024H),H
AB5A2:	POP	HL
	INC	HL
	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,AB567
AB5A9:	XOR	A
AB5AA:	LD	(DB8D6),HL
	POP	HL
	LD	(DBA61),HL
	LD	L,A
	LD	H,000H
	RET
;
AB5B5:	LD	A,001H
	JR	AB5AA
;
AB5B9:	LD	A,B
	OR	C
	JR	Z,AB5AA
	JR	AB5B5
;
BDOS_33:CALL	AB835
	CALL	AB7C6
	JR	AB5CA
;
BDOS_20:CALL	AB835
AB5CA:	CALL	BREAD
	JR	C,RET0001
AB5CF:	LD	IY,(DB8D4)
	INC	(IY+020H)
	OR	A
	JP	Z,RET0000
RET0001:LD	HL,00001H
	RET
;
BDOS_34:CALL	AB835
	CALL	AB7C6
	JR	AB5E9
;
BDOS_21:CALL	AB835
AB5E9:	CALL	BWRITE
	JR	AB5CF
;
BDOS_22:CALL	AB8B7
	LD	HL,001B6H
	PUSH	HL
	LD	HL,00301H
	PUSH	HL
	CALL	AB780
	PUSH	HL
	LD	HL,00014H		; sys_open
;	PUSH	HL
;	RST	8				; CALL	X0008	; call kernel
;	EX	DE,HL
;	POP	BC
call KERNEL
;
	POP	BC
	POP	BC
	POP	BC
	LD	A,H
	AND	L
	INC	A
	RET	Z
	LD	IY,(DB8D4)
	LD	(IY+020H),000H
	LD	(IY+00EH),080H
	LD	(IY+00FH),000H
	JP	AB3DA
;
BDOS_23:CALL	AB8B7
	PUSH	DE
	CALL	AB780
	LD	HL,TB8D9
	LD	DE,DB8E6
	LD	BC,0000CH
	LDIR
	POP	DE
	LD	HL,00010H
	ADD	HL,DE
	EX	DE,HL
	CALL	AB780
	PUSH	HL
	LD	HL,DB8E6
	PUSH	HL
	LD	HL,00011H		; sys_link
;	PUSH	HL
;	RST	8				; CALL	X0008	; call kernel
;	EX	DE,HL
;	POP	BC
call KERNEL
;
	POP	BC
	POP	BC
	JR	C,AB671
	LD	HL,DB8E6
	PUSH	HL
	LD	HL,00021H		; sys_unlink
;	PUSH	HL
;	RST	8				; CALL	X0008	; call kernel
;	EX	DE,HL
;	POP	BC
call KERNEL
;
	POP	BC
	Jr	NC,RET__00
	LD	HL,TB8D9
	PUSH	HL
	LD	HL,00021H		; sys_unlink
;	PUSH	HL
;	RST	8				; CALL	X0008	; call kernel
;	EX	DE,HL
;	POP	BC
call KERNEL
;
	POP	BC
AB671:	JP	C,RETFFFF
RET__00:JP	RET0000
;
BDOS_24:LD	HL,00001H
	LD	(DB8D6),HL
	RET
;
BDOS_26:LD	C,E
	LD	B,D
	JP	SETDMA
;
BDOS_27:LD	A,E
	CP	002H
	JR	C,AB689
	LD	A,0FFH
	RET
;
AB689:	LD	A,001H
	LD	BC,00200H
	LD	DE,0FDE8H
	LD	HL,005A0H
	LD	IY,00000H
	LD	IX,TBA4C 	; 0BA4CH ??
	RET
;
BDOS_31:LD	HL,TBA4C	; 0BA4CH ??
	RET
;
BDOS_35:CALL	AB8B7
	CALL	AB780
	LD	DE,TB8F5
	PUSH	DE
	PUSH	HL
	LD	HL,0001BH		; sys_statfstat
;	PUSH	HL
;	RST	8				; CALL	X0008	; call kernel
;	EX	DE,HL
;	POP	BC
call KERNEL
;
	POP	BC
	POP	BC
	LD	IY,(DB8D4)
	LD	A,H
	OR	L
	JR	NZ,AB6D9
	LD	HL,(DB903)
	LD	(IY+021H),L
	LD	(IY+022H),H
	LD	HL,(DB905)
	LD	(IY+023H),L
	LD	(IY+024H),H
	Jr	RET_000
;	LD	HL,00000H
;	RET
;
AB6D9:	LD	(IY+021H),000H
	LD	(IY+022H),000H
	LD	(IY+023H),L
	LD	(IY+024H),H
	JP	RETFFFF			;	LD	HL,0FFFFH   ;	RET
;
BDOS_36:LD	HL,00020H
	ADD	HL,DE
	LD	A,(HL)
	INC	HL
	LD	(HL),A
	INC	HL
	LD	(HL),000H
RET_000:jp	RET0000			;	LD	HL,00000H   ;	RET
;
BDOS_42:CALL	AB735
	LD	A,(DBA6C)
	AND	0FEH
	SRL	A
	LD	L,A
	LD	H,000H
	LD	DE,007BCH
	ADD	HL,DE
	LD	A,(DBA6B)
	AND	01FH
	LD	E,A
	LD	A,(DBA6C)
	AND	001H
	SLA	A
	SLA	A
	SLA	A
	LD	B,A
	LD	A,(DBA6B)
	AND	0E0H
	SRL	A
	SRL	A
	SRL	A
	SRL	A
	SRL	A
	OR	B
	LD	D,A
	LD	(DB8D4),DE
	LD	(DB8D6),HL
	RET
;
AB735:	LD	DE,DBA69
	PUSH	DE
	LD	HL,0001EH		; sys_time
;	PUSH	HL
;	RST	8				; CALL	X0008	; call kernel
;	POP	BC
call KERNEL
;
	POP	BC
	RET
;
BDOS_44:CALL	AB735
	LD	A,(DBA6A)
	AND	0F8H
	SRL	A
	SRL	A
	SRL	A
	LD	H,A
	LD	A,(DBA69)
	AND	01FH
	ADD	A,A
	LD	D,A
	LD	E,000H
	LD	A,(DBA6A)
	AND	007H
	SLA	A
	SLA	A
	SLA	A
	LD	B,A
	LD	A,(DBA69)
	AND	0E0H
	SRL	A
	SRL	A
	SRL	A
	SRL	A
	SRL	A
	OR	B
	LD	L,A
	LD	(DB8D4),DE
	LD	(DB8D6),HL
	RET
;
AB780:	LD	IX,TB8D9
	EX	DE,HL
	PUSH	HL
	INC	HL
	LD	B,008H
AB789:	LD	A,(HL)
	INC	HL
	OR	A
	JR	Z,AB79C
	CP	020H
	JR	Z,AB79C
	CALL	AB8CB
	LD	(IX+000H),A
	INC	IX
	DJNZ	AB789
AB79C:	POP	HL
	LD	DE,00009H
	ADD	HL,DE
	LD	A,(HL)
	CP	020H
	JR	Z,AB7BE
	LD	(IX+000H),02EH
	INC	IX
	LD	B,003H
AB7AE:	LD	A,(HL)
	INC	HL
	CP	020H
	JR	Z,AB7BE
	CALL	AB8CB
	LD	(IX+000H),A
	INC	IX
	DJNZ	AB7AE
AB7BE:	LD	(IX+000H),000H
	LD	HL,TB8D9
	RET
;
AB7C6:	LD	IX,00000H
	LD	HL,00000H
	LD	DE,00000H
	CALL	AB81F
	LD	IY,(DB8D4)
	LD	BC,00080H
	JR	AB7F3
;
AB7DC:	LD	IX,00000H
	LD	HL,00000H
	LD	DE,00000H
	CALL	AB81F
	LD	IY,(DB8D4)
	LD	C,(IY+00EH)
	LD	B,(IY+00FH)
AB7F3:	LD	E,(IY+021H)
	LD	D,(IY+022H)
	LD	L,(IY+023H)
	LD	H,(IY+024H)
	LD	A,H
	OR	L
	OR	D
	OR	E
	RET	Z
	LD	A,B
	OR	A
	JR	NZ,AB80D
	LD	A,C
	CP	040H
	JR	C,AB80F
AB80D:	LD	H,000H
AB80F:	LD	IX,00000H
	PUSH	IX
	PUSH	BC
	CALL	AB9FD
	LD	IX,00000H
	JR	AB81F
;
AB81F:	PUSH	IX
	PUSH	HL
	PUSH	DE
	LD	HL,(DB8F3)
	PUSH	HL
	LD	HL,00019H		; sys_lseek
;	PUSH	HL
;	RST	8				; CALL	X0008	; call kernel
;	EX	DE,HL
;	POP	BC
call KERNEL
;	
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	RET
;
AB835:	CALL	AB8B7
	LD	HL,0001AH
	ADD	HL,DE
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	LD	(DB8F3),DE
	RET
;
AB844:	LD	DE,TBA6D
	LD	HL,DBA7F
	XOR	A
	LD	(DE),A
	INC	DE
	LD	B,008H
	CALL	AB88A
	LD	B,003H
	CALL	AB88A
	LD	B,015H
	CALL	MEMZERO
	LD	DE,(DB8D4)
	INC	DE
	LD	A,(DE)
	CP	020H
	JR	NZ,AB870
	LD	HL,00008H
	ADD	HL,DE
	LD	A,(HL)
	CP	020H
	LD	A,0FFH
	RET	Z
AB870:	LD	HL,TBA6E
	LD	B,00BH
AB875:	LD	A,(DE)
	CP	03FH
	JR	Z,AB884
	CALL	AB8CB
	LD	C,A
	LD	A,(HL)
	CALL	AB8CB
	XOR	C
	RET	NZ
AB884:	INC	HL
	INC	DE
	DJNZ	AB875
	XOR	A
	RET
;
AB88A:	LD	A,(HL)
	CP	061H
	JR	C,AB895
	CP	07BH
	JR	NC,AB895
	AND	05FH
AB895:	OR	A
	JR	Z,AB8AA
	INC	HL
	CP	02EH
	JR	Z,AB8AA
	LD	(DE),A
	INC	DE
	DJNZ	AB88A
AB8A1:	LD	A,(HL)
	OR	A
	RET	Z
	INC	HL
	CP	02EH
	RET	Z
	JR	AB8A1
;
AB8AA:	LD	A,020H
	INC	B
	DEC	B
	RET	Z
	JR	AB8B2
;
MEMZERO:XOR	A
AB8B2:	LD	(DE),A
	INC	DE
	DJNZ	AB8B2
	RET
;
AB8B7:	PUSH	DE
	PUSH	HL
	LD	DE,(DBA65)
	LD	A,D
	OR	E
	CALL	NZ,AB429
	LD	HL,00000H
	LD	(DBA65),HL
	POP	HL
	POP	DE
	RET
;
AB8CB:	CP	041H
	RET	C
	CP	05BH
	RET	NC
	OR	020H
	RET
;
;------ from BIOS beg ------ for space fill
;
AB0D7:
	EX	DE,HL
	DEC	DE
FCB10LDIR:
	LD	HL,TB13D
	LD	BC,00010H
	LDIR
	RET					;11
;
AB0EB:
	LD	(HL),03FH
	INC	HL
	DEC	B
	RET	Z
	LD	A,(HL)
	CP	020H
	JR	Z,AB0EB
;	JR	AB0E2			; 21
;
AB0E2:
	LD	A,(HL)
	CP	02AH
	JR	Z,AB0EB
	INC	HL
	DJNZ	AB0E2
	RET					; 9
;
;------ from BIOS end ------
;
DB8D4:	DEFW	0
DB8D6:	DEFW	0
DB8D8:	DEFB	000H
TB8D9:	DEFB	020H
	DEFB	020H
	DEFB	020H
	DEFB	020H
	DEFB	020H
	DEFB	020H
	DEFB	020H
	DEFB	020H
	DEFB	020H
	DEFB	020H
	DEFB	020H
	DEFB	020H
TB13D:
	DEFB	000H
DB8E6:	DEFB	020H
	DEFB	020H
	DEFB	020H
	DEFB	020H
	DEFB	020H
	DEFB	020H
	DEFB	020H
	DEFB	020H
	DEFB	020H
	DEFB	020H
	DEFB	020H
	DEFB	020H
	DEFB	000H
DB8F3:	DEFW	0
TB8F5:	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
DB903:	DEFW	0
DB905:	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
DB90F:	DEFW	0
DB911:	DEFW	0
;
BDOSEND:
DEFS 256-LOW(BDOSEND-BDOSBEG)
BIOSBEG:
;
BCOLD:	JP	DOWARM
BWARM:	JP	DOWARM
CONSTAT:JP	0EC96h		; Orion UZIX clone allready have inbuild CP/M BIOS emulation (console functions CONSTAT/CONIN/CONOUT)	; DOCONSTAT
CONIN:	JP	0EC99h		; Orion UZIX clone allready have inbuild CP/M BIOS emulation (console functions CONSTAT/CONIN/CONOUT)	; DOCONIN
CONOUT:	JP	0EC9Ch		; Orion UZIX clone allready have inbuild CP/M BIOS emulation (console functions CONSTAT/CONIN/CONOUT)	; DOCONOUT
LIST:	JP	RETA0
PUNCH:	JP	RETA0
READER:	JP	RETA0
HOME:	JP	RETA0
SELDSK:	JP	DOSELDSK
SETTRK:	JP	RETA0
SETSEC:	JP	RETA0
SETDMA:	JP	DOSETDMA
BREAD:	JP	DOREAD
BWRITE:	JP	DOWRITE
LISTST:	JP	RETA0
SECTRAN:JP	RETA0
;
KERNEL:
	POP	IX			; return address
	PUSH	HL
KERNEL1:
	CALL	0008	; call kernel ; saves IX
	EX	DE,HL		; uint returning value
	POP	BC
	JP	(IX)		; return
;
DOWARM:	CALL TTYCOOKED

; if (chdir(wd)) PF("cd: %s\n", stringerr[errno]);		/* set current dir to initial dir */

AB95E:	LD	HL,00000H
	PUSH	HL
	LD	l,00BH		; HL,0000BH		; sys_exit
;	PUSH	HL
;	RST	8				; CALL	X0008	; call kernel
;	EX	DE,HL
;	POP	HL
call KERNEL
;
	POP	HL
	JR	AB95E
;
; 2 - Return Console Input Status
;
;DOCONSTAT:
;	LD	HL,TTY_CONST	;  ioctl fcn to read queue count
;	CALL TTYCTL		;   Execute ioctl on STDIN
;	LD	A,H
;	OR	L		; Anything There?
;	RET	Z		; ..return Zero if Not
;	OR	0FFH		; Else signify char waiting
;	RET
;
;DOCONIN:
;
;	CALL GETCHAR
;	LD	A,H
;	OR	L
;	LD	A,(CHARBUF)
;	RET	NZ
;	XOR	A
;	RET
;
GETCHAR:				; A=keycode, HL=keypressed
	LD	HL,00001H		; count to read (single char)
	PUSH	HL
	LD	DE, CHARBUF		; buffer
	PUSH	DE
	LD	l,h				; HL,00000H - file descriptor (stdin)
	PUSH	HL
	LD	L,017H			; sys_readwrite -> read (17h)
AB988:
;	PUSH	HL
;	RST	8				; CALL	X0008	; call kernel
;	EX	DE,HL			; HL = actual readed
;	POP	BC
call KERNEL
;
	POP	BC
	POP	BC
	POP	BC
	LD	A,(CHARBUF)
	RET
;
;DOCONOUT:
;	LD	A,C
;	LD	DE, CHARBUF
;	LD	(DE),A
;	LD	HL,00001H
;	PUSH	HL
;	PUSH	DE
;	LD	HL,00001H
;	PUSH	HL
;	LD	L,024H
;	JR	AB988
;
DOSELDSK:
	LD	HL,TBA3C
	RET
;
DOSETDMA:
	LD	(DBA61),BC
	RET
;
DOREAD:
	LD	A,017H
	CALL	AB9D2
	RET	C
	OR	A
	JR	Z,AB9EA
	SUB	080H
	RET	Z
	LD	DE,(DBA61)
	ADD	HL,DE
	LD	(HL),01AH
RETA0:	XOR	A
	RET
;
DOWRITE:
	LD	A,024H
	CALL	AB9D2
	RET	C
	SUB	080H
	RET	Z
	JR	AB9EA
;
AB9D2:	LD	DE,00080H
AB9D5:	PUSH	DE
	LD	HL,(DBA61)
	PUSH	HL
	LD	HL,(DB8F3)
	PUSH	HL
	LD	E,A
;	PUSH	DE
;	RST	8		; CALL	X0008
;	EX	DE,HL
;	POP	BC
ex	de,hl
call KERNEL
;
	POP	BC
	POP	BC
	POP	BC
	LD	A,L
	RET	NC
AB9EA:	LD	A,001H
	RET
;
TTYRAWCHAR:
	LD	hl, TTY_RAWCHAR ; TTY_RAW_UNBUFF	; 2			; HL,00002H
TTYCTL:
	PUSH	HL
	LD	HL,00000H		; stdin
	PUSH	HL
	LD	L,0FH			; H=0 sys_ioctl
;	PUSH	HL
;	RST	8				; CALL	X0008  result in DE
;	ex	de,hl			; result in HL
;	POP	BC
call KERNEL	
;
	POP	BC
	POP	BC
	RET
;
AB9FD:	EX	DE,HL
	EX	(SP),HL
	EXX
	POP	DE
	POP	BC
	EXX
	POP	BC
	PUSH	HL
	LD	HL,00000H
	EXX
	LD	HL,00000H
	LD	A,C
	LD	C,B
	CALL	ABA25
	LD	A,C
	CALL	ABA25
	EXX
	LD	A,C
	EXX
	CALL	ABA25
	EXX
	LD	A,B
	EXX
	CALL	ABA25
	PUSH	HL
	EXX
	POP	DE
	RET
;
ABA25:	LD	B,008H
ABA27:	SRL	A
	JR	NC,ABA30
	ADD	HL,DE
	EXX
	ADC	HL,DE
	EXX
ABA30:	EX	DE,HL
	ADD	HL,HL
	EX	DE,HL
	EXX
	EX	DE,HL
	ADC	HL,HL
	EX	DE,HL
	EXX
	DJNZ	ABA27
	RET
;
TBA3C:	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	06DH
	DEFB	0BAH
	DEFB	04CH
	DEFB	0BAH
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
TBA4C:	DEFB	000H
	DEFB	0F9H
	DEFB	000H
	DEFB	002H
	DEFB	000H
	DEFB	001H
	DEFB	000H
	DEFB	001H
	DEFB	000H
	DEFB	000H
	DEFB	001H
	DEFB	0FFH
	DEFB	000H
	DEFB	000H
	DEFB	0E9H
	DEFB	0FDH
	DEFB	001H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
DBA61:	DEFB	080H
	DEFB	000H
DBA63:	DEFB	000H
	DEFB	000H
DBA65:	DEFB	000H
	DEFB	000H
CHARBUF:DEFB	020H
DBA68:	DEFB	000H
DBA69:	DEFB	000H
DBA6A:	DEFB	000H
DBA6B:	DEFB	000H
DBA6C:	DEFB	000H
;
TBA6D:	DEFB	000H
TBA6E:	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
DBA7D:	DEFB	000H
	DEFB	000H
DBA7F:	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
DBA84:	DEFB	000H
	DEFB	000H
DBA86:	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
DBA8A:	DEFB	000H
	DEFB	000H
DBA8C:	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	000H
	DEFB	0FFH
	DEFB	0BAH
	DEFB	0FFH
	DEFB	0BAH
	DEFB	0FFH
	DEFB	0BAH
ARGV	EQU	BIOSEND
ARGC	EQU	BIOSEND+2
ENVP	EQU	BIOSEND+4
SPSTOR	EQU	BIOSEND+6
;
INITEMU:				; "use_once" - code below may be overwritten by UZIX stack after EMU started
;	LD	L,(IX+004H)
;	LD	H,(IX+005H)
;	LD	(ENVP),HL		; HL=envp
	LD	L,(IX+002H)
	LD	H,(IX+003H)		; HL=argv[]
	LD	(ARGV),HL
;	LD	L,(IX+000H)
;	LD	H,(IX+001H)		; HL=argc
;	LD	(ARGC),HL
;
	ld	de,3			; Orion UZIX clone allready have inbuild CP/M BIOS emulation (console functions CONSTAT/CONIN/CONOUT)
	ld	hl,(1)			; HL=ORIGINAL BIOSWARM
	add	hl,de			; HL=CONSTAT
	ld	(CONSTAT+1),hl
	add	hl,de			; HL=CONIN
	ld	(CONIN+1),hl
	add	hl,de			; HL=CONOUT
	ld	(CONOUT+1),hl
	ld	hl,(9)
	ld	(KERNEL1+1),hl		; save kernel entry point so area 0..0FFh can be used
	ld	a,(0EFFFh)		; memory page marker
	ld	(BERR1),a
	ld	(BERR2),a
	ld	(BERR3),a
	ld	(BERR4),a
;	LD	(SPSTOR),SP
;
	LD	A,0C3H			; setup BDOS and BIOS call vectors
	LD	HL,BDOS
	LD	(Y0005),A
	LD	(Y0006),HL
	LD	HL,BWARM		; BIOSWARM
	LD	(Y0000),A
	LD	(Y0001),HL
	LD	HL,00095H
	LD	(Y0003),HL		; set CPM IOBYTE to TTY (95) for all devices, set current drive to A: (00)
	CALL	TTYRAWCHAR		; set tty RAW mode

	LD	DE,05CH
	CALL FCB10LDIR	; init FCB1
	CALL FCB10LDIR	; init FCB2 
	LD	IX,(ARGV)
	LD	E,081H		; DE,00081H
;	LD	C,000H		; C=0 after FCB10LDIR
	INC	IX
	INC	IX			; skip argv[0] - executable name
AB037:	LD	L,(IX+000H)	; get argv[i]
	INC	IX
	LD	H,(IX+000H)
	INC	IX
	LD	A,H
	OR	L
	JR	Z,AB061		; if end of argv array

;;; char wd[PATHLEN]=INITEMU;
;;; getcwd(wd,PATHLEN-1);								/* get and store initial path */

; a1=ExtractFilePath(argv[i])
; argv[i]=ExtractFileName(argv[i])
; if (chdir(a1)) PF("cd: %s\n", stringerr[errno]);		/* set current dir to argument path */

;;; _chdir:
;;; ld hl,3
;;; jp __sysint__

	LD	A,020H
	LD	(DE),A
	INC	DE
	INC	C
AB04A:	LD	A,(HL)
	OR	A
	JR	Z,AB037		; next argv[i]
	CP	061H
	JR	C,AB058
	CP	07BH
	JR	NC,AB058
	AND	05FH		; UPCASE for smal letters
AB058:	LD	(DE),A
	INC	HL
	INC	DE
	INC	C
	BIT	7,E
	JR	NZ,AB04A
	DEC	DE
AB061:	XOR	A
	LD	(DE),A
	LD	HL,00080H
	LD	(HL),C		; CPM argv str formed
	INC	HL
	LD	DE,0005DH
	CALL	AB0F7
	OR	A
	LD	DE,0006DH
	CALL	NZ,AB0F7
	LD	DE,0005CH
	CALL	AB098
	LD	DE,0006CH
;	CALL	AB098
;
AB098:	
	xor	a
	ld	(de),a
	inc	de
	ld	hl,AB0D7
	push hl
	LD	L,E
	LD	H,D
	LD	B,00BH
AB09C:	LD	A,(DE)
	INC	DE
	CP	022H
	RET	Z		; jr z,AB0D7
	CP	02BH
	RET	Z		;,AB0D7
	CP	02CH
	RET	Z		;,AB0D7
	CP	02EH
	RET	Z		;,AB0D7
	CP	02FH
	RET	Z		;,AB0D7
	CP	03AH
	RET	Z		;,AB0D7
	CP	03BH
	RET	Z		;,AB0D7
	CP	03DH
	RET	Z		;,AB0D7
	CP	05BH
	RET	Z		;,AB0D7
	CP	05DH
	RET	Z		;,AB0D7
	DJNZ AB09C
	pop	af		; balance stack
	LD	B,008H
	PUSH	HL
	CALL	AB0E2
	POP	HL
	LD	BC,00008H
	ADD	HL,BC
	LD	B,003H
	JP	AB0E2
;
AB0F7:	LD	A,(HL)
	INC	HL
	OR	A
	RET	Z
	CP	020H
	JR	Z,AB103
	CP	009H
	JR	NZ,AB108
AB103:	DEC	C
	LD	A,C
	JR	NZ,AB0F7
	RET
;
AB108:	LD	B,008H
	PUSH	DE
	CALL	AB12D
	POP	DE
	OR	A
	RET	Z
	CP	020H
	RET	Z
	CP	02EH
	JR	Z,AB123
AB118:	LD	A,(HL)
	INC	HL
	OR	A
	RET	Z
	CP	020H
	RET	Z
	CP	02EH
	JR	NZ,AB118
AB123:	LD	A,E
	ADD	A,008H
	LD	E,A
	LD	B,003H
AB129:	LD	A,(HL)
	INC	HL
	OR	A
	RET	Z
AB12D:	CP	02EH
	RET	Z
	CP	020H
	RET	Z
	LD	(DE),A
	INC	DE
	DEC	C
	LD	A,C
	RET	Z
	DJNZ	AB129
	OR	0FFH
	RET
DW BIOSBEG
DW TTYCTL
;
; FCB PATTERN
;
;TB13D:	DEFB	000H
;	DEFB	020H
;	DEFB	020H
;	DEFB	020H
;	DEFB	020H
;	DEFB	020H
;	DEFB	020H
;	DEFB	020H
;	DEFB	020H
;	DEFB	020H
;	DEFB	020H
;	DEFB	020H
;	DEFB	000H
;	DEFB	000H
;	DEFB	000H
;	DEFB	000H
;
BIOSEND:
DEFS 256-LOW(BIOSEND-BIOSBEG)
.dephase
	END
;
